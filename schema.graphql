# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The domain of the AI Agent"""
enum AIAgentDomain {
  CUSTOMERSERVICE
  FINANCIAL
  HEALTHCARE
  HR
  LEGAL
  MARKETING
  REAL_ESTATE
  SALES
  TECHNICAL_SUPPORT
}

type AIAgentResponse {
  description: String
  domain: AIAgentDomain!
  embed: String!
  id: ID!
  instruction: String
  name: String!
  preTrainedDataURL: String
  pricing: String
  timeout: DateTimeISO
  welcomeMessage: String
}

type Company {
  id: ID!
  industry: String!
  location: String!
  name: String!
  size: String!
}

type CompanyMutationResponse {
  company: Company
  message: String
  success: Boolean!
}

"""The size of the company"""
enum CompanySize {
  LARGE
  MEDIUM
  SMALL
}

input CreateAgentInput {
  description: String
  domain: AIAgentDomain!
  instruction: String
  model: String!
  name: String!
  preTrainedDataURL: String
  pricing: String
  timeout: DateTimeISO
  tools: [IntegratedTool!]
  welcomeMessage: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""The tools granting more capability to the AI agent"""
enum IntegratedTool {
  YOUTUBE_VIDEO_TRANSCRIPTION
}

type Mutation {
  allocatePreferenceToCompany(companyId: String!, preferences: [PreferenceInput!]!): CompanyMutationResponse!
  createAgent(data: CreateAgentInput!): AIAgentResponse!
  createCompany(data: PartialCompanyInput!): CompanyMutationResponse!
  signInUser(data: SignInUserInput!): SignInUserResponse!
  signUp(data: SignUpUserInput!): SignUpUserResponse!
}

input PartialCompanyInput {
  industry: String!
  location: String!
  name: String!
  size: CompanySize!
}

input PreferenceInput {
  geographicPreferences: String!
  preferredBusinessSize: CompanySize!
  preferredIndustry: String!
}

type Query {
  getUser(id: String!): UserQueryResponse!
  getUserCompany(id: String!): UserCompayQueryResponse!
  hello: String!
}

input SignInUserInput {
  email: String!
  password: String!
}

type SignInUserResponse {
  sessionToken: String!
}

input SignUpUserInput {
  email: String!
  password: String!
}

type SignUpUserResponse {
  sessionToken: String!
}

type UserCompayQueryResponse {
  companies: [Company!]
  id: ID!
}

type UserQueryResponse {
  email: String!
  id: ID!
}